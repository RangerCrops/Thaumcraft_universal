plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'fabric-loom' version '0.12-SNAPSHOT'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

def dataOutput1 = '../common/src/main/generated'
def dataOutput2 = '../common/src/main/resources'
loom {
//    tasks.withType(Jar) {
//        duplicatesStrategy = DuplicatesStrategy.INCLUDE
//    }
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        datagen {
            server()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput1)}"
            runDir "build/datagen"

            sourceSets {
                main {
                    resources {
//                        srcDirs += dataOutput1
                        srcDirs += dataOutput2
                    }
                }
            }
        }

//        client {
//            sourceSets {
//                main {
//                    resources {
//                        srcDirs += dataOutput1
//                        srcDirs += dataOutput2
//                    }
//                }
//            }
//        }
    }

}


sourceSets {
    main {
        resources {
            srcDirs += dataOutput1
            if (gradle.startParameter.taskNames == ["build"]) {
                srcDirs += dataOutput2
            }
        }
    }
}

configurations {
    common
    common1
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon1 // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    compileClasspath.extendsFrom common1
    runtimeClasspath.extendsFrom common1
    developmentFabric.extendsFrom common1
}


repositories {
    mavenLocal()
    // DashLoader maven.
    maven {
        url = uri("https://oskarstrom.net/maven")

        content {
            includeGroup("net.oskarstrom")
        }
    }
    maven { url "https://maven.shedaniel.me" }

}

dependencies {
    modImplementation fileTree(dir: 'libs', include: ['*.jar'])
    include "org.joml:joml:1.10.5"
//    common1(project(path: ":kenzaMcApi", configuration: "namedElements")) {
//        transitive false
//    }

//    common1(project(path: ":kenzaMcApi"))

    modRuntimeOnly(fileTree(dir: 'libs_dev', include: ['*.jar']))
    modImplementation "software.bernie.geckolib:geckolib-fabric-1.19:${project.geckolib_version_fabric}"
    modImplementation("com.github.glitchfiend:TerraBlender-fabric:${project.terrablender_version}")
//    shadowCommon(fileTree(dir: 'libs_dev', include: ['*.jar']))
//    modImplementation(project(path: ":mlp", configuration: "namedElements")) { transitive false }
//    shadowCommon(project(path: ":kenzaMcApi", configuration: "transformProductionFabric")) { transitive false }

    modApi "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modApi("com.terraformersmc:modmenu:${rootProject.modmenu_version}")
//    modApi include("me.shedaniel.cloth:cloth-config-fabric:7.0.72") {
//        exclude(group: "net.fabricmc.fabric-api")
//    }

//    modApi "dev.architectury:architectury:${rootProject.architectury_version}"

//    modImplementation("io.github.cottonmc:LibGui:6.0.1+1.19")
//    include("io.github.cottonmc:LibGui:6.0.1+1.19")
    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.fabric_rei_version}")
    modImplementation("io.github.cottonmc:LibGui:${rootProject.fabric_libGui}")
    include("io.github.cottonmc:LibGui:${rootProject.fabric_libGui}")

//    modImplementation ("com.kenza:thaumcraft:0.0.1")
//    include ("com.kenza:thaumcraft:0.0.1")
//    common(project(path: ":common", configuration: "namedElements")) { transitive false }
//    common(project(path: ":common", configuration: "namedElements")) { transitive false }
//    common(project(path: ":common", configuration: "namedElements")) { transitive false }

    if (gradle.startParameter.taskNames == ["build"]) {
        common(project(path: ":kenzaCore", configuration: "namedElements")) { transitive false }
        common(project(path: ":common", configuration: "namedElements")) { transitive false }
    }else{
        implementation(project(path: ":kenzaCore", configuration: "namedElements")) { transitive false }
        implementation(project(path: ":common", configuration: "namedElements")) { transitive false }
    }

    include(project(path: ":kenzaCore"))
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }



//    common(project(path: ":common", configuration: "namedElements")) { transitive false }
//    include(project(path: ":common"))
//    implementation(project(path: ":common"))
//    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

//    include(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
//    include(project(path: ":common"))
//    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modCompileOnly("net.oskarstrom:DashLoader:2.0-dev12")

}

processResources {
    inputs.property "version", project.version
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"
//    project.configurations.implementation.canBeResolved = true
//    configurations = [project.configurations.implementation]
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}


remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric+${rootProject.minecraft_version}"
}


jar {
    classifier "dev"
}
tasks.withType(Tar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
