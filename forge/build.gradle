plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "kotlin"
}


architectury {
    platformSetupLoomIde()
    forge()
}
def dataOutput1 = '../common/src/main/generated'
def dataOutput2 = '../common/src/main/resources'

sourceSets {
    main {
        resources {
            srcDirs += dataOutput1
            srcDirs += dataOutput2
        }
    }
}

repositories {
    // Add KFF Maven repository
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

//    forge {
//        convertAccessWideners = true
//        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
//    }



    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "thaumcraft-common.mixins.json"
        mixinConfig "thaumcraft.mixins.json"

    }
//    launchConfigs {
//        data {
//            arg("--output", file("src/main/resources").absolutePath)
//
////            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
//        }
//    }

}

configurations {
    shadow
    common
    common1
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon1 // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    compileClasspath.extendsFrom common1
    runtimeClasspath.extendsFrom common1
    developmentFabric.extendsFrom common1
}

dependencies {
//    modApi(project(":kenzaMcApi")) {
//        transitive false
//    }

//    implementation(project(path: ":kenzaMcApi", configuration: "namedElements")) { transitive false }

    implementation 'thedarkcolour:kotlinforforge:3.9.1'

    modImplementation fileTree(dir: 'libs', include: ['*.jar'])
    modImplementation fileTree(dir: 'libs_mods', include: ['*.jar'])

//    common1(project(path: ":kenzaCore", configuration: "namedElements")) {
//        transitive false
//    }


    common(fileTree(dir: 'libs_dev', include: ['*.jar']))
    shadowCommon fileTree(dir: 'libs_dev', include: ['*.jar'])

//    shadowCommon(fileTree(dir: 'libs_dev', include: ['*.jar']))

    forge "net.minecraftforge:forge:${rootProject.forge_version}"
//    implementation 'thedarkcolour:kotlinforforge:1.16.0'
//    forgeRuntimeLibrary(kotlin("stdlib-jdk8", version = "1.6.0"))
//    forgeRuntimeLibrary(kotlin("reflect", version = "1.6.0"))

    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

//    shade(project(path: ":kenzaMcApi", configuration: "namedElements")) {
//        transitive false
//    }
//
//    shadowCommon(project(path: ":kenzaMcApi", configuration: "transformProductionForge")) {
//        transitive = false
//    }

    common1(project(path: ":kenzaCore", configuration: "namedElements")) {
        transitive false
    }
    shadowCommon1(project(path: ":kenzaCore", configuration: "transformProductionForge")){
        transitive false
    }

//    shadowCommon1(project(path: ":kenzaCore", configuration: "transformProductionForge")) {
//        transitive false
//    }


    common(project(path: ":common", configuration: "namedElements")) {
        transitive false
    }

    shadowCommon(project(path: ":common" , configuration: "transformProductionForge")){
        transitive false
    }

    modRuntimeOnly "software.bernie.geckolib:geckolib-forge-1.19:${rootProject.geckolib_version_forge}"
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-forge:${rootProject.fabric_rei_version}"
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-plugin-compatibilities-forge:9.1.530"
//    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rootProject.fabric_rei_version}"
//    common "me.shedaniel:RoughlyEnoughItems-forge:${project.fabric_rei_version}"
//    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-forge:${project.fabric_rei_version}"
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-forge:${project.fabric_rei_version}"
//    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
//        transitive = false
//        exclude module: "libgui"
//    }
}

processResources {
    inputs.property "version", project.version
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge+${rootProject.minecraft_version}"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}


compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
